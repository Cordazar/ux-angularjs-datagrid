{"version":3,"sources":["ux-datagrid-expandRows.js"],"names":["exports","global","define","amd","module","ux","datagrid","events","COLLAPSE_ROW","EXPAND_ROW","TOGGLE_ROW","ROW_TRANSITION_COMPLETE","COLLAPSE_ALL_EXPANDED_ROWS","options","expandRows","autoClose","scrollOnExpand","angular","factory","inst","getIndex","itemOrIndex","lastGetIndex","getNormalizedIndex","setup","item","template","templateModel","defaultName","cls","style","swap","throwError","cache","setupTemplates","each","getState","index","opened","states","closed","toggle","expand","collapse","result","log","opening","setState","immediate","omitIndexes","closeAll","silent","cacheItemData","intIndex","parseInt","rowsLength","indexOf","state","elm","tpl","swapTpl","s","visible","getTemplate","data","name","getExistingRow","scopes","scope","$state","transition","addEventListener","TRNEND_EV","onTransitionEnd","reverse","makeReverseStyle","css","setTemplate","getRowElm","addClass","evt","target","flow","add","params","reverseStyle","value","key","list","event","util","apply","Object","prototype","hasOwnProperty","element","$index","removeEventListener","removeClass","height","offsetHeight","isNaN","updateHeights","scrollModel","scrollIntoView","dispatch","length","getViewportHeight","getContentHeight","scrollToBottom","isExpanded","getTemplateHeight","superGetTemplateHeight","destroy","logWrapper","dummyStyle","document","createElement","vendor","t","vendors","split","i","l","substr","transitionEnd","","webkit","Moz","O","ms","unwatchers","push","$on","ON_READY","ON_ROW_COMPILE","$s","el","classList","ON_BEFORE_TOGGLE_SORT","ON_BEFORE_DATA_CHANGE","this"],"mappings":"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","file":"ux-datagrid-expandRows.min.js","sourcesContent":["/*!\n* ux-angularjs-datagrid v.1.5.2\n* (c) 2016, Obogo\n* https://github.com/obogo/ux-angularjs-datagrid\n* License: MIT.\n*/\n(function (exports, global) {\nif (typeof define === \"function\" && define.amd) {\n  define(exports);\n} else if (typeof module !== \"undefined\" && module.exports) {\n  module.exports = exports;\n} else {\n  global.ux = exports;\n}\n\nexports.datagrid.events.COLLAPSE_ROW = \"datagrid:collapseRow\";\n\nexports.datagrid.events.EXPAND_ROW = \"datagrid:expandRow\";\n\nexports.datagrid.events.TOGGLE_ROW = \"datagrid:toggleRow\";\n\nexports.datagrid.events.ROW_TRANSITION_COMPLETE = \"datagrid:rowTransitionComplete\";\n\nexports.datagrid.events.COLLAPSE_ALL_EXPANDED_ROWS = \"datagrid:collapseAllExpandedRows\";\n\nexports.datagrid.options.expandRows = [];\n\nexports.datagrid.options.expandRows.autoClose = true;\n\nexports.datagrid.options.expandRows.scrollOnExpand = true;\n\nangular.module(\"ux\").factory(\"expandRows\", function() {\n    //TODO: on change row template. This needs to collapse the row.\n    return [ \"inst\", function(inst) {\n        var intv, result = exports.logWrapper(\"expandRows\", {}, \"green\", inst), lastGetIndex, cache = {}, opened = {}, opening = false, states = {\n            opened: \"opened\",\n            closed: \"closed\"\n        }, superGetTemplateHeight = inst.templateModel.getTemplateHeight, // transition end lookup.\n        dummyStyle = document.createElement(\"div\").style, vendor = function() {\n            var vendors = \"t,webkitT,MozT,msT,OT\".split(\",\"), t, i = 0, l = vendors.length;\n            for (;i < l; i++) {\n                t = vendors[i] + \"ransform\";\n                if (t in dummyStyle) {\n                    return vendors[i].substr(0, vendors[i].length - 1);\n                }\n            }\n            return false;\n        }(), TRNEND_EV = function() {\n            if (vendor === false) return false;\n            var transitionEnd = {\n                \"\": \"transitionend\",\n                webkit: \"webkitTransitionEnd\",\n                Moz: \"transitionend\",\n                O: \"oTransitionEnd\",\n                ms: \"MSTransitionEnd\"\n            };\n            return transitionEnd[vendor];\n        }();\n        dummyStyle = null;\n        function getIndex(itemOrIndex) {\n            lastGetIndex = typeof itemOrIndex === \"number\" ? itemOrIndex : inst.getNormalizedIndex(itemOrIndex, lastGetIndex);\n            return lastGetIndex;\n        }\n        function setup(item) {\n            item.template = item.template || inst.templateModel.defaultName;\n            if (!item.cls && !item.style && !item.swap) {\n                inst.throwError(\"expandRows will not work without an cls|style|swap property\");\n            }\n            cache[item.template] = item;\n        }\n        function setupTemplates() {\n            ux.each(inst.options.expandRows, setup);\n        }\n        function getState(itemOrIndex) {\n            var index = getIndex(itemOrIndex);\n            return opened[index] ? states.opened : states.closed;\n        }\n        function toggle(itemOrIndex) {\n            if (getState(itemOrIndex) === states.closed) {\n                expand(itemOrIndex);\n            } else {\n                collapse(itemOrIndex);\n            }\n        }\n        function expand(itemOrIndex) {\n            var index = getIndex(itemOrIndex);\n            if (getState(index) === states.closed) {\n                result.log(\"expand %s\", itemOrIndex);\n                // prevent multi-finger expand rows.\n                if (inst.options.expandRows.autoClose && opening) {\n                    return;\n                }\n                opening = true;\n                autoClose([ index ], true);\n                setState(index, states.opened);\n            }\n        }\n        function collapse(itemOrIndex, immediate) {\n            var index = getIndex(itemOrIndex);\n            if (getState(index) === states.opened) {\n                result.log(\"collapse %s\", itemOrIndex);\n                setState(index, states.closed, immediate);\n            }\n        }\n        function autoClose(omitIndexes, immediate) {\n            if (inst.options.expandRows.autoClose) {\n                closeAll(omitIndexes, false, immediate);\n            }\n        }\n        function closeAll(omitIndexes, silent, immediate) {\n            exports.each(opened, function(cacheItemData, index) {\n                var intIndex = parseInt(index, 10);\n                if (!omitIndexes || inst.rowsLength > intIndex && omitIndexes.indexOf(intIndex) === -1) {\n                    if (silent) {\n                        collapse(intIndex, true);\n                        delete opened[index];\n                    } else {\n                        collapse(intIndex, immediate);\n                    }\n                }\n            });\n        }\n        function setState(index, state, immediate) {\n            var template = inst.templateModel.getTemplate(inst.data[index]), elm, tpl, swapTpl, s, visible;\n            if (cache[template.name]) {\n                elm = inst.getExistingRow(index);\n                s = inst.scopes[index];\n                visible = elm && elm.scope() || false;\n                if (!elm || !s) {\n                    // we must be closing a row out of view. possibly destroyed.\n                    delete opened[index];\n                    return;\n                }\n                s.$state = state;\n                tpl = cache[template.name];\n                if (visible && tpl.transition !== false) {\n                    elm[0].addEventListener(TRNEND_EV, onTransitionEnd);\n                }\n                if (tpl.style) {\n                    if (!tpl.reverse) {\n                        tpl.reverse = makeReverseStyle(elm, tpl.style);\n                    }\n                    elm.css(state === states.opened ? tpl.style : tpl.reverse);\n                }\n                if (tpl.swap && tpl.state !== state) {\n                    swapTpl = cache[tpl.swap];\n                    swapTpl.cls = swapTpl.cls || \"\";\n                    inst.templateModel.setTemplate(index, tpl.swap, [ swapTpl.cls ]);\n                    elm = inst.getRowElm(index);\n                } else if (tpl.cls) {\n                    elm[state === states.opened ? \"addClass\" : \"removeClass\"](tpl.cls);\n                    elm.addClass(\"animating\");\n                }\n                // we need to wait for the heights to update before updating positions.\n                var evt = {\n                    target: elm[0],\n                    index: index,\n                    state: state\n                };\n                if (immediate) {\n                    onTransitionEnd(evt, immediate);\n                } else {\n                    inst.flow.add(onTransitionEnd, [ evt ], 0);\n                }\n            } else {\n                inst.throwError(\"unable to toggle template. cls for template '\" + template.name + \"' was not set.\");\n            }\n        }\n        function makeReverseStyle(elm, style) {\n            var params = {\n                elm: elm,\n                style: style,\n                reverse: {}\n            };\n            ux.each(style, reverseStyle, params);\n            return params.reverse;\n        }\n        function reverseStyle(value, key, list, params) {\n            params.reverse[key] = params.elm.css(key);\n        }\n        function onTransitionEnd(event, immediate) {\n            var elm, s, index, state;\n            if (exports.util.apply(Object.prototype.hasOwnProperty, event, [ \"index\" ])) {\n                elm = inst.getRowElm(event.index);\n                index = event.index;\n                state = event.state;\n            } else {\n                elm = angular.element(event.target);\n            }\n            s = elm.scope();\n            if (state && s) {\n                s.$index = index;\n                s.$state = state;\n            } else if (s) {\n                index = s.$index;\n                state = s.$state;\n            }\n            elm[0].removeEventListener(TRNEND_EV, onTransitionEnd);\n            elm.removeClass(\"animating\");\n            if (state === states.opened) {\n                opened[index] = {\n                    index: index,\n                    height: parseInt(elm[0].offsetHeight || 0, 10)\n                };\n                if (isNaN(opened[index].height)) {\n                    inst.throwError(\"Invalid Height\");\n                }\n            } else {\n                delete opened[index];\n            }\n            inst.updateHeights(index);\n            // if opening and collapsing a row at the same time, we don't want to do this twice.\n            if (immediate) {\n                opening = false;\n            } else {\n                // we told the heights to update. Give time for them to change then fire the event.\n                inst.flow.add(function() {\n                    if (inst.options.expandRows.scrollOnExpand) {\n                        inst.scrollModel.scrollIntoView(index, true);\n                    }\n                    inst.dispatch(exports.datagrid.events.ROW_TRANSITION_COMPLETE);\n                    opening = false;\n                    if (inst.options.expandRows.scrollOnExpand) {\n                        inst.flow.add(function() {\n                            // check for last row. On expansion it needs to scroll down.\n                            if (state === states.opened && index === inst.data.length - 1 && inst.getViewportHeight() < inst.getContentHeight()) {\n                                inst.scrollModel.scrollToBottom(true);\n                            }\n                        }, [], 0);\n                    }\n                }, [], 0);\n            }\n        }\n        function isExpanded(itemOrIndex) {\n            var index = getIndex(itemOrIndex);\n            return !!opened[index];\n        }\n        function getTemplateHeight(item) {\n            var index = getIndex(item);\n            if (opened[index]) {\n                result.log(\"\texpandRow %s to height %s\", index, opened[index].height);\n                return opened[index].height;\n            }\n            return superGetTemplateHeight(item);\n        }\n        function destroy() {\n            result = null;\n            cache = null;\n            opened = null;\n            states = null;\n        }\n        // override the getTemplateHeight to return the result with the expanded height.\n        inst.templateModel.getTemplateHeight = getTemplateHeight;\n        result.states = states;\n        result.getIndex = getIndex;\n        result.toggle = function(itemOrIndex) {\n            inst.flow.add(toggle, [ itemOrIndex ]);\n        };\n        result.expand = function(itemOrIndex) {\n            inst.flow.add(expand, [ itemOrIndex ]);\n        };\n        result.collapse = function(itemOrIndex) {\n            inst.flow.add(collapse, [ itemOrIndex ]);\n        };\n        result.isExpanded = isExpanded;\n        result.destroy = destroy;\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.ON_READY, setupTemplates));\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.EXPAND_ROW, function(event, itemOrIndex) {\n            result.expand(itemOrIndex);\n        }));\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.COLLAPSE_ROW, function(event, itemOrIndex) {\n            result.collapse(itemOrIndex);\n        }));\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.TOGGLE_ROW, function(event, itemOrIndex) {\n            result.toggle(itemOrIndex);\n        }));\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.ON_ROW_COMPILE, function(event, $s, el) {\n            if (opened[$s.$index]) {\n                var template = inst.templateModel.getTemplate(inst.data[$s.$index]), tpl = cache[template.name];\n                el[0].classList.add(tpl.cls);\n            }\n        }));\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.COLLAPSE_ALL_EXPANDED_ROWS, function(event, silent) {\n            closeAll(null, silent);\n        }));\n        if (exports.datagrid.events.ON_BEFORE_TOGGLE_SORT) {\n            inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.ON_BEFORE_TOGGLE_SORT, function(event) {\n                closeAll();\n            }));\n        }\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.ON_BEFORE_DATA_CHANGE, function(event) {\n            closeAll(null, true);\n        }));\n        inst.expandRows = result;\n        return inst;\n    } ];\n});\n}(this.ux = this.ux || {}, function() {return this;}()));\n"]}