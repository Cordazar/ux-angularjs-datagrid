{"version":3,"sources":["../../../src/addons/expandRows.js"],"names":["exports","datagrid","events","COLLAPSE_ROW","EXPAND_ROW","TOGGLE_ROW","ROW_TRANSITION_COMPLETE","COLLAPSE_ALL_EXPANDED_ROWS","options","expandRows","autoClose","scrollOnExpand","angular","module","factory","inst","getIndex","itemOrIndex","lastGetIndex","getNormalizedIndex","setup","item","template","templateModel","defaultName","cls","style","swap","throwError","cache","setupTemplates","ux","each","getState","index","opened","states","closed","toggle","expand","collapse","result","log","opening","setState","immediate","omitIndexes","closeAll","silent","cacheItemData","intIndex","parseInt","rowsLength","indexOf","state","elm","tpl","swapTpl","getTemplate","data","name","getExistingRow","scope","$state","transition","addEventListener","TRNEND_EV","onTransitionEnd","reverse","makeReverseStyle","css","setTemplate","getRowElm","addClass","evt","target","flow","add","params","reverseStyle","value","key","list","event","s","util","apply","Object","prototype","hasOwnProperty","element","$index","removeEventListener","removeClass","height","offsetHeight","isNaN","updateHeights","scrollModel","scrollIntoView","dispatch","length","getViewportHeight","getContentHeight","scrollToBottom","isExpanded","getTemplateHeight","superGetTemplateHeight","destroy","logWrapper","dummyStyle","document","createElement","vendor","t","vendors","split","i","l","substr","transitionEnd","","webkit","Moz","O","ms","unwatchers","push","$on","ON_READY","ON_ROW_COMPILE","$s","el","classList","ON_BEFORE_TOGGLE_SORT","ON_BEFORE_DATA_CHANGE"],"mappings":"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","file":"ux-datagrid-expandRows.min.js","sourcesContent":["exports.datagrid.events.COLLAPSE_ROW = \"datagrid:collapseRow\";\nexports.datagrid.events.EXPAND_ROW = \"datagrid:expandRow\";\nexports.datagrid.events.TOGGLE_ROW = \"datagrid:toggleRow\";\nexports.datagrid.events.ROW_TRANSITION_COMPLETE = \"datagrid:rowTransitionComplete\";\nexports.datagrid.events.COLLAPSE_ALL_EXPANDED_ROWS = \"datagrid:collapseAllExpandedRows\";\nexports.datagrid.options.expandRows = [];\nexports.datagrid.options.expandRows.autoClose = true;\nexports.datagrid.options.expandRows.scrollOnExpand = true;\nangular.module('ux').factory('expandRows', function () {\n    //TODO: on change row template. This needs to collapse the row.\n    return ['inst', function (inst) {\n        var intv,\n            result = exports.logWrapper('expandRows', {}, 'green', inst),\n            lastGetIndex,\n            cache = {},\n            opened = {},\n            opening = false,\n            states = {\n                opened: \"opened\", closed: \"closed\"\n            },\n            superGetTemplateHeight = inst.templateModel.getTemplateHeight,\n\n        // transition end lookup.\n            dummyStyle = document.createElement('div').style,\n            vendor = (function () {\n                var vendors = 't,webkitT,MozT,msT,OT'.split(','),\n                    t,\n                    i = 0,\n                    l = vendors.length;\n\n                for ( ; i < l; i++ ) {\n                    t = vendors[i] + 'ransform';\n                    if ( t in dummyStyle ) {\n                        return vendors[i].substr(0, vendors[i].length - 1);\n                    }\n                }\n\n                return false;\n            })(),\n            TRNEND_EV = (function () {\n                if ( vendor === false ) return false;\n\n                var transitionEnd = {\n                        ''\t\t\t: 'transitionend',\n                        'webkit'\t: 'webkitTransitionEnd',\n                        'Moz'\t\t: 'transitionend',\n                        'O'\t\t\t: 'oTransitionEnd',\n                        'ms'\t\t: 'MSTransitionEnd'\n                    };\n\n                return transitionEnd[vendor];\n            })();\n\n        dummyStyle = null;\n\n        function getIndex(itemOrIndex) {\n            lastGetIndex = typeof itemOrIndex === \"number\" ? itemOrIndex : inst.getNormalizedIndex(itemOrIndex, lastGetIndex);\n            return lastGetIndex;\n        }\n\n        function setup(item) {\n            item.template = item.template || inst.templateModel.defaultName;\n            if (!item.cls && !item.style && !item.swap) {\n                inst.throwError(\"expandRows will not work without an cls|style|swap property\");\n            }\n            cache[item.template] = item;\n        }\n\n        function setupTemplates() {\n            ux.each(inst.options.expandRows, setup);\n        }\n\n        function getState(itemOrIndex) {\n            var index = getIndex(itemOrIndex);\n            return opened[index] ? states.opened : states.closed;\n        }\n\n        function toggle(itemOrIndex) {\n            if (getState(itemOrIndex) === states.closed) {\n                expand(itemOrIndex);\n            } else {\n                collapse(itemOrIndex);\n            }\n        }\n\n        function expand(itemOrIndex) {\n            var index = getIndex(itemOrIndex);\n            if (getState(index) === states.closed) {\n                result.log(\"expand %s\", itemOrIndex);\n                // prevent multi-finger expand rows.\n                if (inst.options.expandRows.autoClose && opening) {\n                    return;\n                }\n                opening = true;\n                autoClose([index], true);\n                setState(index, states.opened);\n            }\n        }\n\n        function collapse(itemOrIndex, immediate) {\n            var index = getIndex(itemOrIndex);\n            if (getState(index) === states.opened) {\n                result.log(\"collapse %s\", itemOrIndex);\n                setState(index, states.closed, immediate);\n            }\n        }\n\n        function autoClose(omitIndexes, immediate) {\n            if (inst.options.expandRows.autoClose) {\n                closeAll(omitIndexes, false, immediate);\n            }\n        }\n\n        function closeAll(omitIndexes, silent, immediate) {\n            exports.each(opened, function (cacheItemData, index) {\n                var intIndex = parseInt(index, 10);\n                if (!omitIndexes || (inst.rowsLength > intIndex && omitIndexes.indexOf(intIndex) === -1)) {\n                    if (silent) {\n                        collapse(intIndex, true);\n                        delete opened[index];\n                    } else {\n                        collapse(intIndex, immediate);\n                    }\n                }\n            });\n        }\n\n        function setState(index, state, immediate) {\n            var template = inst.templateModel.getTemplate(inst.data[index]), elm, tpl, swapTpl;\n            if (cache[template.name]) {\n                elm = inst.getExistingRow(index);\n                if (!elm || !elm.scope()) { // we must be closing a row out of view. possibly destroyed.\n                    delete opened[index];\n                    return;\n                }\n                elm.scope().$state = state;\n                tpl = cache[template.name];\n                if (tpl.transition !== false) {\n                    elm[0].addEventListener(TRNEND_EV, onTransitionEnd);\n                }\n                if (tpl.style) {\n                    if (!tpl.reverse) {\n                        tpl.reverse = makeReverseStyle(elm, tpl.style);\n                    }\n                    elm.css(state === states.opened ? tpl.style : tpl.reverse);\n                }\n                if (tpl.swap && tpl.state !== state) {\n                    swapTpl = cache[tpl.swap];\n                    swapTpl.cls = swapTpl.cls || '';\n                    inst.templateModel.setTemplate(index, tpl.swap, [swapTpl.cls]);\n                    elm = inst.getRowElm(index);\n                } else if (tpl.cls) {\n                    elm[(state === states.opened ? \"addClass\" : \"removeClass\")](tpl.cls);\n                    elm.addClass('animating');\n                }\n                // we need to wait for the heights to update before updating positions.\n                var evt = {target: elm[0], index:index, state:state};\n                if (immediate) {\n                    onTransitionEnd(evt, immediate);\n                } else {\n                    inst.flow.add(onTransitionEnd, [evt], 0);\n                }\n            } else {\n                inst.throwError(\"unable to toggle template. cls for template '\" + template.name + \"' was not set.\");\n            }\n        }\n\n        function makeReverseStyle(elm, style) {\n            var params = {elm: elm, style: style, reverse: {}};\n            ux.each(style, reverseStyle, params);\n            return params.reverse;\n        }\n\n        function reverseStyle(value, key, list, params) {\n            params.reverse[key] = params.elm.css(key);\n        }\n\n        function onTransitionEnd(event, immediate) {\n            var elm, s, index, state;\n            if (exports.util.apply(Object.prototype.hasOwnProperty, event, ['index'])) {\n                elm = inst.getRowElm(event.index);\n                index = event.index;\n                state = event.state;\n            } else {\n                elm = angular.element(event.target);\n            }\n            s = elm.scope();\n            if (state && s) {\n                s.$index = index;\n                s.$state = state;\n            } else if (s) {\n                index = s.$index;\n                state = s.$state;\n            }\n            elm[0].removeEventListener(TRNEND_EV, onTransitionEnd);\n            elm.removeClass('animating');\n            if (state === states.opened) {\n                opened[index] = {\n                    index: index,\n                    height: parseInt(elm[0].offsetHeight || 0, 10)\n                };\n                if (isNaN(opened[index].height)) {\n                    inst.throwError(\"Invalid Height\");\n                }\n            } else {\n                delete opened[index];\n            }\n\n            inst.updateHeights(index);\n            // if opening and collapsing a row at the same time, we don't want to do this twice.\n            if (immediate) {\n                opening = false;\n            } else {\n                // we told the heights to update. Give time for them to change then fire the event.\n                inst.flow.add(function () {\n                    if (inst.options.expandRows.scrollOnExpand) {\n                        inst.scrollModel.scrollIntoView(index, true);\n                    }\n                    inst.dispatch(exports.datagrid.events.ROW_TRANSITION_COMPLETE);\n                    opening = false;\n\n                    if (inst.options.expandRows.scrollOnExpand) {\n                        inst.flow.add(function () {\n                            // check for last row. On expansion it needs to scroll down.\n                            if (state === states.opened && index === inst.data.length - 1 && inst.getViewportHeight() < inst.getContentHeight()) {\n                                inst.scrollModel.scrollToBottom(true);\n                            }\n                        }, [], 0);\n                    }\n                }, [], 0);\n            }\n        }\n\n        function isExpanded(itemOrIndex) {\n            var index = getIndex(itemOrIndex);\n            return !!opened[index];\n        }\n\n        function getTemplateHeight(item) {\n            var index = getIndex(item);\n            if (opened[index]) {\n                result.log(\"\\texpandRow %s to height %s\", index, opened[index].height);\n                return opened[index].height;\n            }\n            return superGetTemplateHeight(item);\n        }\n\n        function destroy() {\n            result = null;\n            cache = null;\n            opened = null;\n            states = null;\n        }\n\n        // override the getTemplateHeight to return the result with the expanded height.\n        inst.templateModel.getTemplateHeight = getTemplateHeight;\n\n        result.states = states;\n        result.getIndex = getIndex;\n        result.toggle = function(itemOrIndex) {\n            inst.flow.add(toggle, [itemOrIndex]);\n        };\n        result.expand = function (itemOrIndex) {\n            inst.flow.add(expand, [itemOrIndex]);\n        };\n        result.collapse = function (itemOrIndex) {\n            inst.flow.add(collapse, [itemOrIndex]);\n        };\n        result.isExpanded = isExpanded;\n        result.destroy = destroy;\n\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.ON_READY, setupTemplates));\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.EXPAND_ROW, function (event, itemOrIndex) {\n            result.expand(itemOrIndex);\n        }));\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.COLLAPSE_ROW, function (event, itemOrIndex) {\n            result.collapse(itemOrIndex);\n        }));\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.TOGGLE_ROW, function (event, itemOrIndex) {\n            result.toggle(itemOrIndex);\n        }));\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.ON_ROW_COMPILE, function (event, $s, el) {\n            if (opened[$s.$index]) {\n                var template = inst.templateModel.getTemplate(inst.data[$s.$index]),\n                    tpl = cache[template.name];\n                el[0].classList.add(tpl.cls);\n            }\n        }));\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.COLLAPSE_ALL_EXPANDED_ROWS, function (event, silent) {\n            closeAll(null, silent);\n        }));\n\n        if (exports.datagrid.events.ON_BEFORE_TOGGLE_SORT) {\n            inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.ON_BEFORE_TOGGLE_SORT, function (event) {\n                closeAll();\n            }));\n        }\n\n        inst.unwatchers.push(inst.scope.$on(exports.datagrid.events.ON_BEFORE_DATA_CHANGE, function (event) {\n            closeAll(null, true);\n        }));\n\n        inst.expandRows = result;\n\n        return inst;\n    }];\n});\n"]}